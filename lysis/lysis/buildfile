libs =
import libs += libodb%lib{odb}
import libs += libodb-sqlite%lib{odb-sqlite}

ops = lysis
mod = workspace

exe{lysis}: {hxx ixx txx cxx}{** -version -{$ops-options} -{$mod-odb} -pregenerated/**} \
            {hxx            }{    version                                             } $libs testscript

# Target metadata, see also --build2-metadata in lysis.cxx.
#
exe{lysis}:
{
  export.metadata = 1 lysis
  lysis.name = [string] lysis
  lysis.version  = [string] $version
  lysis.checksum = [string] $version
}

hxx{version}: in{version} $src_root/manifest

cxx.poptions =+ "-I$out_root" "-I$src_root"

## Consumption build ($develop == false).
#

# Use pregenerated versions in the consumption build.
#
exe{lysis}: pregenerated/{hxx ixx cxx}{**}: include = (!$develop)

if! $develop
  cxx.poptions =+ "-I($src_base/pregenerated)" # Note: must come first.

# Distribute pregenerated versions only in the consumption build.
#
pregenerated/{hxx ixx cxx}{*}: dist = (!$develop)

#
##

## Development build ($develop == true).
#

exe{lysis}: {hxx ixx cxx}{$ops-options}: include = $develop
exe{lysis}: {hxx ixx cxx}{$mod-odb}: include = $develop

if $develop
  import! [metadata] cli = cli%exe{cli}

for f: $ops
{
  d = $directory($f) # empty, cxx/, etc.

  <{hxx ixx cxx}{$f-options}>: cli{$f}
  {
    dist = ($develop ? $relative([dir_path] "pregenerated/lysis/$d", $d) : false)
  }
}

<hxx{~'/(.*)-options/'} ixx{~'/\1-options/'} cxx{~'/\1-options/'}>: cli{~'/\1/'} $cli
%
if $develop
{{
  t = $path($>[0]).t

  depdb dyndep --byproduct --file $t

  h = $path($>[0])
  i = $path($>[1])
  c = $path($>[2])

  d = $directory($h)
  p = $string($leaf($d, $out_root)) # lysis, lysis/cxx, etc

  # Note that we generate *-options.hxx/ixx/cxx from cli<$f> instead of
  # <$f>.hxx/ixx/cxx to avoid filename conflicts and keep the base name <$f>
  # reserved for our own implementation headers and sources.
  #
  options = --std c++11 -I $src_root --include-prefix $p              \
            --guard-prefix $regex.replace($ucase($p), '[/\\]', '_')   \
            --generate-specifier --generate-file-scanner              \
            --suppress-undocumented --cli-namespace lysis::cli        \
            --exclude-base --include-with-brackets --output-suffix -options

  $cli $options --generate-dep --dep-file $t -o $d $path($<[0])

  # If the result differs from the pregenerated version, copy it over.
  #
  d = [dir_path] $src_base/pregenerated/$p

  dh = $d/$leaf($h)
  di = $d/$leaf($i)
  dc = $d/$leaf($c)

  if diff $dh $h >- && \
     diff $di $i >- && \
     diff $dc $c >-
    exit
  end

  cp $h $dh
  cp $i $di
  cp $c $dc
}}

## ODB
#

if $develop
  import! [metadata] odb = odb%exe{odb}

for f: $mod
{
  libue{$f-meta}: $libs

  exe{lysis}: libue{$f-meta} $libs

  <{hxx ixx cxx}{$f-odb}>: hxx{$f} libue{$f-meta} $odb
  {
    dist = ($develop ? $relative([dir_path] "pregenerated/lysis/$d", $d) : false)
  }
}

<{hxx ixx cxx}{~'/(.+)-odb/'}>: hxx{~'/\1/'} libue{~'/.+-meta/'} $odb
%
if $develop
{{
  pops = $cxx.lib_poptions($<[1])

  depdb hash $pops

  h = $path($>[0])
  i = $path($>[1])
  c = $path($>[2])

  d = $directory($h)
  p = $string($leaf($d, $out_root))

  options = --std c++11 --database sqlite -I $src_root              \
            --include-with-brackets --include-prefix $p             \
            --guard-prefix $regex.replace($ucase($p), '[/\\]', '_') \
            --generate-schema --generate-query                      \
            --output-dir $out_base

  $odb $options $pops $path($<[0])

  # If the result differs from the pregenerated version, copy it over.
  #
  d = [dir_path] $src_base/pregenerated/$p

  dh = $d/$leaf($h)
  di = $d/$leaf($i)
  dc = $d/$leaf($c)

  if diff $dh $h >- && \
     diff $di $i >- && \
     diff $dc $c >-
    exit
  end

  cp $h $dh
  cp $i $di
  cp $c $dc
}}

#
##
